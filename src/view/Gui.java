/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.Calcolatrice;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.List;
import java.util.NoSuchElementException;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.CoreStack;
import model.ComplexNumber;

public class Gui extends javax.swing.JFrame {

    /**
     * Creates new form Gui
     */
    private Calcolatrice calcolatrice;
    private CoreStack coreStack;    //Necessario per updateModel();

    private List<ComplexNumber> numList;
    private DefaultListModel model;

    public Gui() {
        initComponents();
    }

    public Gui(Calcolatrice calcolatrice, CoreStack coreStack) {
        initComponents();
        this.calcolatrice = calcolatrice;
        this.coreStack = coreStack;
        this.numList = new ArrayList<>();
        this.model = new DefaultListModel();

        buttonInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/info.png"))); // NOI18N

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        buttonSum = new javax.swing.JButton();
        buttonDiff = new javax.swing.JButton();
        buttonProd = new javax.swing.JButton();
        buttonDiv = new javax.swing.JButton();
        buttonSqr = new javax.swing.JButton();
        buttonInv = new javax.swing.JButton();
        textInsertNumber = new javax.swing.JTextField();
        buttonInsert = new javax.swing.JButton();
        labelTitle = new javax.swing.JLabel();
        buttonDup = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonSwap = new javax.swing.JButton();
        buttonDrop = new javax.swing.JButton();
        buttonOver = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listComplexNumbers = new javax.swing.JList<>();
        labelListTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        labelTitle2 = new javax.swing.JLabel();
        textInsertOperations = new javax.swing.JTextField();
        buttonInfo = new javax.swing.JButton();
        buttonInsertFunction = new javax.swing.JButton();
        buttonSaveFunctions = new javax.swing.JButton();
        buttonLoadFunctions = new javax.swing.JButton();
        buttonDeleteFunctions = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(502, 400));
        setResizable(false);

        buttonSum.setText("Somma");
        buttonSum.setMaximumSize(new java.awt.Dimension(100, 25));
        buttonSum.setMinimumSize(new java.awt.Dimension(100, 25));
        buttonSum.setPreferredSize(new java.awt.Dimension(100, 25));
        buttonSum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSumActionPerformed(evt);
            }
        });

        buttonDiff.setText("Differenza");
        buttonDiff.setMaximumSize(new java.awt.Dimension(100, 25));
        buttonDiff.setMinimumSize(new java.awt.Dimension(100, 25));
        buttonDiff.setPreferredSize(new java.awt.Dimension(100, 25));
        buttonDiff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDiffActionPerformed(evt);
            }
        });

        buttonProd.setText("Prodotto");
        buttonProd.setMaximumSize(new java.awt.Dimension(100, 25));
        buttonProd.setMinimumSize(new java.awt.Dimension(100, 25));
        buttonProd.setPreferredSize(new java.awt.Dimension(100, 25));
        buttonProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonProdActionPerformed(evt);
            }
        });

        buttonDiv.setText("Divisione");
        buttonDiv.setMaximumSize(new java.awt.Dimension(100, 25));
        buttonDiv.setMinimumSize(new java.awt.Dimension(100, 25));
        buttonDiv.setPreferredSize(new java.awt.Dimension(100, 25));
        buttonDiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDivActionPerformed(evt);
            }
        });

        buttonSqr.setText("Radice Quadrata");
        buttonSqr.setMaximumSize(new java.awt.Dimension(125, 25));
        buttonSqr.setMinimumSize(new java.awt.Dimension(125, 25));
        buttonSqr.setPreferredSize(new java.awt.Dimension(125, 25));
        buttonSqr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSqrActionPerformed(evt);
            }
        });

        buttonInv.setText("Inversione Segno");
        buttonInv.setMaximumSize(new java.awt.Dimension(125, 25));
        buttonInv.setMinimumSize(new java.awt.Dimension(125, 25));
        buttonInv.setPreferredSize(new java.awt.Dimension(125, 25));
        buttonInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInvActionPerformed(evt);
            }
        });

        textInsertNumber.setMaximumSize(new java.awt.Dimension(60, 25));
        textInsertNumber.setMinimumSize(new java.awt.Dimension(60, 25));
        textInsertNumber.setPreferredSize(new java.awt.Dimension(60, 25));
        textInsertNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInsertNumberActionPerformed(evt);
            }
        });

        buttonInsert.setText("Inserisci");
        buttonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInsertActionPerformed(evt);
            }
        });

        labelTitle.setText("Calcolatrice Con Numeri Complessi");

        buttonDup.setText("Dup");
        buttonDup.setMaximumSize(new java.awt.Dimension(65, 25));
        buttonDup.setMinimumSize(new java.awt.Dimension(65, 25));
        buttonDup.setPreferredSize(new java.awt.Dimension(65, 25));
        buttonDup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDupActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.setMaximumSize(new java.awt.Dimension(65, 25));
        buttonClear.setMinimumSize(new java.awt.Dimension(65, 25));
        buttonClear.setPreferredSize(new java.awt.Dimension(65, 25));
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonSwap.setText("Swap");
        buttonSwap.setMaximumSize(new java.awt.Dimension(65, 25));
        buttonSwap.setMinimumSize(new java.awt.Dimension(65, 25));
        buttonSwap.setPreferredSize(new java.awt.Dimension(65, 25));
        buttonSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSwapActionPerformed(evt);
            }
        });

        buttonDrop.setText("Drop");
        buttonDrop.setMaximumSize(new java.awt.Dimension(65, 25));
        buttonDrop.setMinimumSize(new java.awt.Dimension(65, 25));
        buttonDrop.setPreferredSize(new java.awt.Dimension(65, 25));
        buttonDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDropActionPerformed(evt);
            }
        });

        buttonOver.setText("Over");
        buttonOver.setMaximumSize(new java.awt.Dimension(65, 25));
        buttonOver.setMinimumSize(new java.awt.Dimension(65, 25));
        buttonOver.setPreferredSize(new java.awt.Dimension(65, 25));
        buttonOver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(labelTitle))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(textInsertNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonInsert))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonSum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonProd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonDiff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonDiv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonSqr, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonInv, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSwap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonOver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textInsertNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonInsert))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDiff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSqr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDiv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonInv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSwap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonOver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        listComplexNumbers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listComplexNumbers);

        labelListTitle.setText("Lista Elementi Stack");

        labelTitle2.setText("Inserisci la sequenza di operazioni:");

        textInsertOperations.setMaximumSize(new java.awt.Dimension(60, 25));
        textInsertOperations.setMinimumSize(new java.awt.Dimension(60, 25));
        textInsertOperations.setPreferredSize(new java.awt.Dimension(60, 25));
        textInsertOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInsertOperationsActionPerformed(evt);
            }
        });

        buttonInfo.setMaximumSize(new java.awt.Dimension(25, 25));
        buttonInfo.setMinimumSize(new java.awt.Dimension(25, 25));
        buttonInfo.setPreferredSize(new java.awt.Dimension(25, 25));
        buttonInfo.setVerifyInputWhenFocusTarget(false);
        buttonInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInfoActionPerformed(evt);
            }
        });

        buttonInsertFunction.setText("Inserisci/Esegui");
        buttonInsertFunction.setMaximumSize(new java.awt.Dimension(150, 25));
        buttonInsertFunction.setMinimumSize(new java.awt.Dimension(150, 25));
        buttonInsertFunction.setPreferredSize(new java.awt.Dimension(150, 25));
        buttonInsertFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInsertFunctionActionPerformed(evt);
            }
        });

        buttonSaveFunctions.setText("Salva");
        buttonSaveFunctions.setMaximumSize(new java.awt.Dimension(70, 25));
        buttonSaveFunctions.setMinimumSize(new java.awt.Dimension(70, 25));
        buttonSaveFunctions.setPreferredSize(new java.awt.Dimension(70, 25));
        buttonSaveFunctions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveFunctionsActionPerformed(evt);
            }
        });

        buttonLoadFunctions.setText("Carica");
        buttonLoadFunctions.setMaximumSize(new java.awt.Dimension(70, 25));
        buttonLoadFunctions.setMinimumSize(new java.awt.Dimension(70, 25));
        buttonLoadFunctions.setPreferredSize(new java.awt.Dimension(70, 25));
        buttonLoadFunctions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadFunctionsActionPerformed(evt);
            }
        });

        buttonDeleteFunctions.setText("Elimina");
        buttonDeleteFunctions.setMaximumSize(new java.awt.Dimension(70, 25));
        buttonDeleteFunctions.setMinimumSize(new java.awt.Dimension(70, 25));
        buttonDeleteFunctions.setPreferredSize(new java.awt.Dimension(70, 25));
        buttonDeleteFunctions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteFunctionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textInsertOperations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(labelTitle2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonInsertFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDeleteFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(buttonSaveFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonLoadFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(labelTitle2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textInsertOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonInsertFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSaveFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLoadFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDeleteFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelListTitle))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelListTitle)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo richiamato quando viene premuto il pulsante "Somma", ed esegue la
     * funzione Calcolatrice.stackSum().
     *
     * @param evt
     */
    private void buttonSumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSumActionPerformed
        try {
            calcolatrice.stackSum();
        } catch (EmptyStackException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Non ci sono abbastanza elementi nello stack\n"
                    + "per effettuare l'operazione somma");

            textInsertNumber.setText("");
            return;
        }

        updateModel();
    }//GEN-LAST:event_buttonSumActionPerformed
    /**
     * Metodo richiamato quando viene premuto il pulsante "Differenza", ed
     * esegue la funzione Calcolatrice.stackDiff().
     *
     * @param evt
     *
     */
    private void buttonDiffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDiffActionPerformed
        try {
            calcolatrice.stackDiff();
        } catch (EmptyStackException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Non ci sono abbastanza elementi nello stack\n"
                    + "per effettuare l'operazione differenza");

            textInsertNumber.setText("");
            return;
        }

        updateModel();

    }//GEN-LAST:event_buttonDiffActionPerformed
    /**
     * Metodo richiamato quando viene premuto il pulsante "Prodotto", ed esegue
     * la funzione Calcolatrice.stackProd().
     *
     * @param evt
     */
    private void buttonProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonProdActionPerformed
        try {
            calcolatrice.stackProd();
        } catch (EmptyStackException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Non ci sono abbastanza elementi nello stack\n"
                    + "per effettuare l'operazione prodotto");

            textInsertNumber.setText("");
            return;
        }

        updateModel();
    }//GEN-LAST:event_buttonProdActionPerformed
    /**
     * Metodo richiamato quando viene premuto il pulsante "Divisione", ed esegue
     * la funzione Calcolatrice.stackDiv().
     *
     * @param evt
     */
    private void buttonDivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDivActionPerformed
        try {
            calcolatrice.stackDiv();
        } catch (EmptyStackException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Non ci sono abbastanza elementi nello stack\n"
                    + "per effettuare l'operazione divisione");

            textInsertNumber.setText("");
            return;
        }
        updateModel();
    }//GEN-LAST:event_buttonDivActionPerformed
    /**
     * Metodo richiamato quando viene premuto il pulsante "Radice Quadrata", ed
     * esegue la funzione Calcolatrice.stackSqr().
     *
     * @param evt
     */
    private void buttonSqrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSqrActionPerformed
        try {
            calcolatrice.stackSqr();
        } catch (EmptyStackException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Non ci sono abbastanza elementi nello stack\n"
                    + "per effettuare l'operazione sqrt");

            textInsertNumber.setText("");
            return;
        }
        updateModel();
    }//GEN-LAST:event_buttonSqrActionPerformed
    /**
     * Metodo richiamato quando viene premuto il pulsante "Inversione di Segno",
     * ed esegue la funzione Calcolatrice.stackInv().
     *
     * @param evt
     *
     *
     */
    private void buttonInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInvActionPerformed
        try {
            calcolatrice.stackInv();
        } catch (EmptyStackException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Non ci sono abbastanza elementi nello stack\n"
                    + "per effettuare l'operazione di inversione");

            textInsertNumber.setText("");
            return;
        }

        updateModel();
    }//GEN-LAST:event_buttonInvActionPerformed
    /**
     * Metodo richiamato quando viene premuto il pulsante "Inserisci", inserisce
     * nello stack il numero inserito nell'apposita area di testo.
     *
     * @param evt
     */
    private void buttonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInsertActionPerformed
        double real = 0, complex = 0;
        String realPart = null;
        String complexPart = null;

        String expression = textInsertNumber.getText();

        if (isOperation(expression)) {
            try {
                calcolatrice.executeOperation(expression);
            } catch (NoSuchElementException e) {
                JFrame jFrame = new JFrame();
                JOptionPane.showMessageDialog(jFrame, "La variabile non è inizializzata");

                textInsertNumber.setText("");
                return;
            }
            textInsertNumber.setText("");
            updateModel();

            return;
        } else if (isExpression(expression)) {
            if ((expression.lastIndexOf("+") == -1) || (expression.lastIndexOf("+") == 0)) {
                realPart = expression.substring(0, expression.lastIndexOf("-"));
                complexPart = expression.substring(expression.lastIndexOf("-") + 1, expression.lastIndexOf("i"));
            } else {
                realPart = expression.substring(0, expression.lastIndexOf("+"));
                complexPart = expression.substring(expression.lastIndexOf("+") + 1, expression.lastIndexOf("i"));
            }
        } else if (isReal(expression)) {
            realPart = expression.substring(0, expression.lastIndexOf(""));
            complexPart = "0";
        } else if (isComplex(expression)) {
            realPart = "0";
            complexPart = expression.substring(0, expression.lastIndexOf("i"));
        } else {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Devi inserire l'espressione nella forma corretta!");

            textInsertNumber.setText("");
            return;
        }

        real = Double.parseDouble(realPart);
        complex = Double.parseDouble(complexPart);

        textInsertNumber.setText("");
        calcolatrice.creatComplexNumber(real, complex);
        updateModel();

    }//GEN-LAST:event_buttonInsertActionPerformed
    /**
     * Metodo per eseguire il metodo
     * {@link buttonInsertActionPerformed(java.awt.event.ActionEvent evt)} alla
     * pressione del tasto invio
     *
     * @param evt
     */
    private void textInsertNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInsertNumberActionPerformed
        buttonInsertActionPerformed(evt);
    }//GEN-LAST:event_textInsertNumberActionPerformed
    /**
     * Metodo per eseguire il metodo {@link Calcolatrice.clear()}
     *
     * @param evt
     */
    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        calcolatrice.clear();
        updateModel();
    }//GEN-LAST:event_buttonClearActionPerformed
    /**
     * Metodo per eseguire il metodo {@link Calcolatrice.duplicate()}
     *
     * @param evt
     */
    private void buttonDupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDupActionPerformed
        try {
            calcolatrice.duplicate();
        } catch (NoSuchElementException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Attenzione, lo Stack è vuoto!");
        }

        updateModel();
    }//GEN-LAST:event_buttonDupActionPerformed
    /**
     * Metodo per eseguire il metodo {@link Calcolatrice.Swap()}
     *
     * @param evt
     */
    private void buttonSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSwapActionPerformed
        try {
            calcolatrice.swap();
        } catch (NoSuchElementException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Gli elementi nello Stack non sono sufficienti per l'operazione di Swap");
        }
        updateModel();
    }//GEN-LAST:event_buttonSwapActionPerformed
    /**
     * Metodo per eseguire il metodo {@link Calcolatrice.drop()}
     *
     * @param evt
     */
    private void buttonDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDropActionPerformed
        try {
            calcolatrice.drop();
        } catch (NoSuchElementException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Attenzione, lo Stack è vuoto!");
        }
        updateModel();
    }//GEN-LAST:event_buttonDropActionPerformed
    /**
     * Metodo che alla pressione del pulsanete esegue il metodo
     * {@link Calcolatrice.over()}
     *
     * @param evt
     */
    private void buttonOverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOverActionPerformed
        try {
            calcolatrice.over();
        } catch (NoSuchElementException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Gli elementi nello Stack non sono sufficienti per l'operazione di Over");
        }
        updateModel();
    }//GEN-LAST:event_buttonOverActionPerformed
    /**
     * Metodo per eseguire il metodo
     * {@link buttonInsertFunctionActionPerformed(java.awt.event.ActionEvent evt)}
     * alla pressione del tasto invio
     *
     * @param evt
     */
    private void textInsertOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInsertOperationsActionPerformed
        buttonInsertFunctionActionPerformed(evt);
    }//GEN-LAST:event_textInsertOperationsActionPerformed
    /**
     * Metodo per poter vedere le info riguardo l'inserimento delle funzioni in
     * un pannello separato
     *
     * @param evt
     */
    private void buttonInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInfoActionPerformed
        try {
            calcolatrice.over();
        } catch (NoSuchElementException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Inserisci il nome della funzione in questo modo [funzione]\n"
                    + "Inserisci le operazioni in questo modo: [op1 op2 op3 push x+yi pop]\n"
                    + "Per eseguire una funzione basta inserire il nome della funzione e premere invio");
        }
    }//GEN-LAST:event_buttonInfoActionPerformed
    /**
     * Metodo richiamato alla pressione del tasto "Inserisci/Modifica", e
     * memorizza la funzione inserita nell'apposita area di testo
     *
     * @param evt
     */
    private void buttonInsertFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInsertFunctionActionPerformed
        String operations = textInsertOperations.getText();
        try {
            calcolatrice.functionController(operations);
        } catch (NumberFormatException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Il numero inserito non è nella forma corretta");
        } catch (NoSuchElementException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Un operazione di questa funzione non è stata trovata");
        } catch (NullPointerException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "La funzione inserita non esiste");
        }
        textInsertOperations.setText("");
        updateModel();
    }//GEN-LAST:event_buttonInsertFunctionActionPerformed
    /**
     * Metodo richiamato alla pressione del tasto "Carica", carica e memorizza
     * una funzione da file di testo
     *
     * @param evt
     */
    private void buttonLoadFunctionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadFunctionsActionPerformed
        String nameFile = textInsertOperations.getText();
        try {
            calcolatrice.loadFile(nameFile);

        } catch (FileNotFoundException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Il File non è stato trovato");
        } catch (IOException ex) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Problema riscontrato durante il caricamento del File");
        }
    }//GEN-LAST:event_buttonLoadFunctionsActionPerformed
    /**
     * Metodo richiamato alla pressione del tasto "Salva", salva il nome della
     * funzione e le operazioni che compie in un file di testo
     *
     * @param evt
     */
    private void buttonSaveFunctionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveFunctionsActionPerformed
        try {
            String name = textInsertOperations.getText();
            calcolatrice.saveFile(name);
        } catch (IOException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Problema riscontrato durante il salvataggio del File");
        } catch (NullPointerException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Questa funzione non esiste");
        }
    }//GEN-LAST:event_buttonSaveFunctionsActionPerformed
    /**
     * Metodo richiamato alla pressione del tasto "Elimina", cancella la
     * funzione corrispondente al nome inserito nell'apposita area di testo
     *
     * @param evt
     */
    private void buttonDeleteFunctionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteFunctionsActionPerformed
        try {
            String name = textInsertOperations.getText();
            textInsertOperations.setText("");
            calcolatrice.deleteFunction(name);
        } catch (NullPointerException e) {
            JFrame jFrame = new JFrame();
            JOptionPane.showMessageDialog(jFrame, "Questa funzione non esiste");
        }
    }//GEN-LAST:event_buttonDeleteFunctionsActionPerformed

    /* Metodi utili, valutare se creare una classe apposita, perché utilizzati
     * anche nella classe Functions
     */
    /**
     * Metodo che ritorna True se in String sono presenti solo caratteri
     * numerici, che possono essere anche seguiti da un simbolo "-", False
     * altrimenti
     *
     * @param String stringa in input
     * @return boolean (True se è una stringa numerica, False altrimenti)
     */
    public static boolean isNumeric(String str) {
        return str.matches("-?\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
    }

    /**
     * Metodo che ritorna True se in String sono presenti solo caratteri
     * numerici complessi nella forma cartesiana
     *
     * @param str
     * @return boolean (True se è un espressione corretta, False altrimenti)
     */
    public static boolean isExpression(String str) {
        return str.matches("[-+]?\\d+(\\.\\d+)?[-+]+\\d+(\\.\\d+)?i+");
    }

    /**
     * Metodo che ritorna True se in String sono presenti solo caratteri
     * numerici eventualmente seguiti da un segno
     *
     * @param str
     * @return (True se è un espressione corretta, False altrimenti)
     */
    public static boolean isReal(String str) {
        return str.matches("[-+]?\\d+(\\.\\d+)?");
    }

    /**
     * Metodo che ritorna True se in String sono presenti solo caratteri
     * numerici seguiti dal simbolo "i" ed eventualmente seguiti da un segno
     *
     * @param str
     * @return (True se è un espressione corretta, False altrimenti)
     */
    public static boolean isComplex(String str) {
        return str.matches("[-+]?\\d+(\\.\\d+)?i+");
    }

    /**
     * Metodo che ritorna True se in String sono presenti solo caratteri
     * numerici eventualmente seguiti da un segno
     *
     * @param str
     * @return (True se è un espressione corretta, False altrimenti)
     */
    public static boolean isOperation(String str) {
        return str.matches("[-+<>][a-z]");
    }

    /**
     * Metodo necessario per aggiornare il model del component
     * listComplexNumbers
     */
    public void updateModel() {
        numList = coreStack.getSubList();
        model.clear();
        for (int i = 0; i < numList.size(); i++) {
            ComplexNumber element = numList.get(i);
            model.addElement(element);
        }
        listComplexNumbers.setModel(model);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonDeleteFunctions;
    private javax.swing.JButton buttonDiff;
    private javax.swing.JButton buttonDiv;
    private javax.swing.JButton buttonDrop;
    private javax.swing.JButton buttonDup;
    private javax.swing.JButton buttonInfo;
    private javax.swing.JButton buttonInsert;
    private javax.swing.JButton buttonInsertFunction;
    private javax.swing.JButton buttonInv;
    private javax.swing.JButton buttonLoadFunctions;
    private javax.swing.JButton buttonOver;
    private javax.swing.JButton buttonProd;
    private javax.swing.JButton buttonSaveFunctions;
    private javax.swing.JButton buttonSqr;
    private javax.swing.JButton buttonSum;
    private javax.swing.JButton buttonSwap;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labelListTitle;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelTitle2;
    private javax.swing.JList<String> listComplexNumbers;
    private javax.swing.JTextField textInsertNumber;
    private javax.swing.JTextField textInsertOperations;
    // End of variables declaration//GEN-END:variables
}
